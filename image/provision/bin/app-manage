#!/bin/bash

source /usr/local/lib/common-app.sh
set +u
# Template /etc/consul/consul/json
preConsulAgent() {
    if [ -n "$CONSUL_DATACENTER_NAME" ]; then
        _log "Updating consul datacenter name (specified: '${CONSUL_DATACENTER_NAME}' )"
        sed -i "s/CONSUL_DATACENTER_NAME/${CONSUL_DATACENTER_NAME}/" /config/consul.json
    else
        _log "Updating consul datacenter name (default: 'dc1')"
        sed -i "s/CONSUL_DATACENTER_NAME/dc1/" /config/consul.json
    fi

    if [ -n "${CONSUL_SERF_LAN_PORT}" ]; then
        _log "Updating consul serf_lan_port (specified: '${CONSUL_SERF_LAN_PORT}' )"
        sed -i "s/CONSUL_SERF_LAN_PORT/${CONSUL_SERF_LAN_PORT}/" /config/consul.json
    else
        _log "Updating consul serf_lan_port (default: '8301')"
        sed -i "s/CONSUL_SERF_LAN_PORT/8301/" /config/consul.json
    fi

    if [ -n "${CONSUL_SERF_WAN_PORT}" ]; then
        _log "Updating consul serf_wan_port (specified: '${CONSUL_SERF_WAN_PORT}' )"
        sed -i "s/CONSUL_SERF_WAN_PORT/${CONSUL_SERF_WAN_PORT}/" /config/consul.json
    else
        _log "Updating consul serf_wan_port (default: '8302')"
        sed -i "s/CONSUL_SERF_WAN_PORT/8302/" /config/consul.json
    fi
}

# consul-agent Health Check
consulAgentHealth () {
    local status=$(curl -Lsf localhost:8500/v1/health/node/${HOSTNAME}  | jq -r '.[] | select( ."CheckID" == "serfHealth" ) | .Status')
    if [[ "${status}" == "passing" ]]; then
        _log "Consul-Agent health: ${status}"
        return 0
    else
        _log "Consul-Agent health: ${status}"
        return 1
    fi
}

# Template CNTLM configuration
preCntlm() {
  if ! assertAWS; then
    _log "Setting default values for cntlm in consul"
    cat /etc/env_vars | grep CNTLM_CFG | awk -F= -v q="'" '{ if ( system( "consul kv get cntlm/config/"$1"" )) { system( "consul kv put cntlm/config/"$1" "q$2q)} }'

    _log "Injecting cntlm port into containerpilot"
    cntlm_port="$(consul kv get cntlm/config/CNTLM_CFG_PORT)"
    containerpilot -putenv "CNTLM_CFG_PORT=${cntlm_port}"

    DOCKER0_IP_ADDR=""
    if [[ $(which docker 2>/dev/null) ]]; then
      _log "Get the docker0 IP"
      while [[ $(ipDetect docker0) == "" ]]; do
        sleep 1
      done
      export DOCKER0_IP_ADDR=$(ipDetect docker0)
      _log "Docker0 IP found ... ${DOCKER0_IP_ADDR}"
    fi

    _log "Rendering /etc/cntlm.conf.ctmpl -> /etc/cntlm.conf"
    consul-template \
      -once \
      -consul-addr http://${CONSUL}:8500 \
      -template "/etc/cntlm.conf.ctmpl:/etc/cntlm.conf"
  fi
}

# Start CNTLM
startCntlm() {
  /usr/sbin/cntlm -f -c /etc/cntlm.conf -U cntlm -P /run/cntlm/cntlmd.pid
}

# CNTLM Health Check
cntlmHealth() {
  local port=$1
  timeout 5 bash -c "</dev/tcp/127.0.0.1/${port}"; return $?
}

watchCntlmConf() {
  if ! assertAWS; then
    _log "Injecting cntlm port into containerpilot"
    cntlm_port="$(consul kv get cntlm/config/CNTLM_CFG_PORT)"
    containerpilot -putenv "CNTLM_CFG_PORT=${cntlm_port}"

    DOCKER0_IP_ADDR=""
    if [[ $(which docker 2>/dev/null) ]]; then
      _log "Get the docker0 IP"
      while [[ $(ipDetect docker0) == "" ]]; do
        sleep 1
      done
      export DOCKER0_IP_ADDR=$(ipDetect docker0)
      _log "Docker0 IP found ... ${DOCKER0_IP_ADDR}"
    fi

    _log "Watching cntlm config from consul"
    consul-template \
      -consul-addr http://${CONSUL}:8500 \
      -template "/etc/cntlm.conf.ctmpl:/etc/cntlm.conf:containerpilot -reloadjob 'cntlm'"
#      -template "/etc/cntlm.conf.ctmpl:/etc/cntlm.conf:systemctl restart cntlm"
#      -template "/etc/cntlm.conf.ctmpl:/etc/cntlm.conf:kill $(cat /run/cntlm/cntlmd.pid)"
  fi
}

# Run Node Exporter
runNodeExporter() {
    _log "Starting the Prometheus Node_Exporter"
    /usr/local/bin/node_exporter
}

# Node Exporter healthcheck
nodeExporterHealth() {
    curl -Lsf -o /dev/null localhost:9100/metrics
}

#Consul Metric Health Check
consulMetricsHealth() {
    _log "health checking Consul metrics on :::8500/v1/agent/metrics"
    curl -Lsf -o /dev/null localhost:8500/v1/agent/metrics
}

$@
